#关于数据库
spring.datasource.url= jdbc:oracle:thin:@10.32.3.3:1521:orcl 
spring.datasource.username=cloudhisoper
spring.datasource.password=Bs0ft123
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
#驱动需要手动添加,parent的依赖并没有这个
spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver
server.port=8081
debug=true
#默认的映射并不会指定子包,这个是个坑
#spring.mvc.static-path-pattern=/static/**
#视图解析器的前缀
spring.thymeleaf.cache=false


#日志框架
#logging.level.com.example.demo=info
#logging.file=./logback.log

#ORM映射框架
#  jpa.hibernate.ddl-auto是hibernate的配置属性
#     -create：每次加载hibernate时都会删除上一次的生成的表然后根据你的model类再重新来生成新表，
#              哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因.
#     -create-drop：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除.
#     -update：以后加载hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除
#              以前的行 表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会.
#     -validate：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。
#强烈建议使用none
spring.jpa.properties.hibernate.hbm2ddl.auto=none
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.show-sql= true


##数据安全
# Number of minutes
demo.security.jwt.tokenExpirationTime=15
demo.security.jwt.refreshTokenExpTime=60
demo.security.jwt.tokenIssuer=http://JOJO.com
demo.security.jwt.tokenSigningKey=xm8EV6Hy5RMMK4EA5CIDAwQus


#rabbitMQ配置
#spring.rabbitmq.host=localhost  localhost
#spring.rabbitmq.port=15673
#spring.rabbitmq.username=guest
#spring.rabbitmq.password=guest


# 连接池的配置信息 使用的是alibaba的druid
# 初始化大小，最小，最大
spring.datasource.initialSize=5
spring.datasource.minIdle=5
spring.datasource.maxActive=20
# 配置获取连接等待超时的时间
spring.datasource.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=SELECT 1 FROM DUAL
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters=config,stat,wall,logbak
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000


#
#mybatis.config-locations=classpath:mybatis/mappers/*Mapper.xml
mybatis.mapper-locations=classpath:mybatis/mappers/*.xml
mybatis.configuration.map-underscore-to-camel-case=true
#制定在该包上打印Debug级别的日志
logging.level.com.example.demo.dao.mybatisDao=debug